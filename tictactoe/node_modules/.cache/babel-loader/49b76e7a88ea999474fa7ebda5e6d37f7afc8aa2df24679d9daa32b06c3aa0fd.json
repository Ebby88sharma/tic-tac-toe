{"ast":null,"code":"var _jsxFileName = \"/workspace/tic-tac-toe/tictactoe/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport WinnerMessage from \"./WinnerMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [cells, setCells] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const checkWinner = newCells => {\n    for (let combination of winningCombinations) {\n      const [a, b, c] = combination;\n      if (newCells[a] && newCells[a] === newCells[b] && newCells[a] === newCells[c]) {\n        setWinner(newCells[a]);\n        return;\n      }\n    }\n    if (newCells.every(cell => cell !== null)) {\n      setWinner(\"Draw\");\n    }\n  };\n  const handleClick = index => {\n    if (cells[index] || winner) return;\n    const newCells = [...cells];\n    newCells[index] = currentPlayer;\n    setCells(newCells);\n    checkWinner(newCells);\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n  const restartGame = () => {\n    setCells(Array(9).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: cells.map((value, index) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: value,\n        onClick: () => handleClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(WinnerMessage, {\n      winner: winner,\n      onRestart: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"vmvauLZu11QmtwgpYlsWym5pkLI=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","WinnerMessage","jsxDEV","_jsxDEV","Board","_s","cells","setCells","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","winningCombinations","checkWinner","newCells","combination","a","b","c","every","cell","handleClick","index","restartGame","children","className","map","value","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onRestart","_c","$RefreshReg$"],"sources":["/workspace/tic-tac-toe/tictactoe/src/components/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport WinnerMessage from \"./WinnerMessage\";\n\nconst Board = () => {\n  const [cells, setCells] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n\n  const winningCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  const checkWinner = (newCells) => {\n    for (let combination of winningCombinations) {\n      const [a, b, c] = combination;\n      if (newCells[a] && newCells[a] === newCells[b] && newCells[a] === newCells[c]) {\n        setWinner(newCells[a]);\n        return;\n      }\n    }\n    if (newCells.every((cell) => cell !== null)) {\n      setWinner(\"Draw\");\n    }\n  };\n\n  const handleClick = (index) => {\n    if (cells[index] || winner) return;\n\n    const newCells = [...cells];\n    newCells[index] = currentPlayer;\n    setCells(newCells);\n    checkWinner(newCells);\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n  };\n\n  const restartGame = () => {\n    setCells(Array(9).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        {cells.map((value, index) => (\n          <Cell key={index} value={value} onClick={() => handleClick(index)} />\n        ))}\n      </div>\n      {winner && <WinnerMessage winner={winner} onRestart={restartGame} />}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,GAAG,CAAC;EACvD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMe,mBAAmB,GAAG,CAC1B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,MAAMC,WAAW,GAAIC,QAAQ,IAAK;IAChC,KAAK,IAAIC,WAAW,IAAIH,mBAAmB,EAAE;MAC3C,MAAM,CAACI,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,WAAW;MAC7B,IAAID,QAAQ,CAACE,CAAC,CAAC,IAAIF,QAAQ,CAACE,CAAC,CAAC,KAAKF,QAAQ,CAACG,CAAC,CAAC,IAAIH,QAAQ,CAACE,CAAC,CAAC,KAAKF,QAAQ,CAACI,CAAC,CAAC,EAAE;QAC7EP,SAAS,CAACG,QAAQ,CAACE,CAAC,CAAC,CAAC;QACtB;MACF;IACF;IACA,IAAIF,QAAQ,CAACK,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,IAAI,CAAC,EAAE;MAC3CT,SAAS,CAAC,MAAM,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIlB,KAAK,CAACkB,KAAK,CAAC,IAAIZ,MAAM,EAAE;IAE5B,MAAMI,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC3BU,QAAQ,CAACQ,KAAK,CAAC,GAAGd,aAAa;IAC/BH,QAAQ,CAACS,QAAQ,CAAC;IAClBD,WAAW,CAACC,QAAQ,CAAC;IACrBL,gBAAgB,CAACD,aAAa,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EACrD,CAAC;EAED,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBlB,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,gBAAgB,CAAC,GAAG,CAAC;IACrBE,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,oBACEV,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAKwB,SAAS,EAAC,OAAO;MAAAD,QAAA,EACnBpB,KAAK,CAACsB,GAAG,CAAC,CAACC,KAAK,EAAEL,KAAK,kBACtBrB,OAAA,CAACH,IAAI;QAAa6B,KAAK,EAAEA,KAAM;QAACC,OAAO,EAAEA,CAAA,KAAMP,WAAW,CAACC,KAAK;MAAE,GAAvDA,KAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoD,CACrE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLtB,MAAM,iBAAIT,OAAA,CAACF,aAAa;MAACW,MAAM,EAAEA,MAAO;MAACuB,SAAS,EAAEV;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAvDID,KAAK;AAAAgC,EAAA,GAALhC,KAAK;AAyDX,eAAeA,KAAK;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}