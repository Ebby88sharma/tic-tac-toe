{"ast":null,"code":"var _jsxFileName = \"/workspace/tic-tac-toe/tictactoe/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport WinnerMessage from \"./WinnerMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [cells, setCells] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const checkWinner = newCells => {\n    for (let combination of winningCombinations) {\n      const [a, b, c] = combination;\n      if (newCells[a] && newCells[a] === newCells[b] && newCells[a] === newCells[c]) {\n        setWinner(newCells[a]);\n        return true;\n      }\n    }\n    if (newCells.every(cell => cell !== null)) {\n      setWinner(\"Draw\");\n      return true;\n    }\n    return false;\n  };\n  const computerMove = () => {\n    const emptyCells = cells.map((cell, index) => cell === null ? index : null).filter(index => index !== null);\n    if (emptyCells.length === 0) return; // No moves available\n\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const newCells = [...cells];\n    newCells[randomIndex] = \"O\";\n    setCells(newCells);\n    if (!checkWinner(newCells)) {\n      setCurrentPlayer(\"X\");\n    }\n  };\n  const handleClick = index => {\n    if (cells[index] || winner || currentPlayer === \"O\") return;\n    const newCells = [...cells];\n    newCells[index] = \"X\";\n    setCells(newCells);\n    if (!checkWinner(newCells)) {\n      setCurrentPlayer(\"O\");\n    }\n  };\n  useEffect(() => {\n    if (currentPlayer === \"O\" && !winner) {\n      const timer = setTimeout(computerMove, 500); // Delay for AI realism\n      return () => clearTimeout(timer);\n    }\n  }, [currentPlayer]);\n  const restartGame = () => {\n    setCells(Array(9).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: cells.map((value, index) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: value,\n        onClick: () => handleClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(WinnerMessage, {\n      winner: winner,\n      onRestart: restartGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"1fN/mqwslp+hGCWZ+4I8Venz1+Y=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Cell","WinnerMessage","jsxDEV","_jsxDEV","Board","_s","cells","setCells","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","winningCombinations","checkWinner","newCells","combination","a","b","c","every","cell","computerMove","emptyCells","map","index","filter","length","randomIndex","Math","floor","random","handleClick","timer","setTimeout","clearTimeout","restartGame","children","className","value","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onRestart","_c","$RefreshReg$"],"sources":["/workspace/tic-tac-toe/tictactoe/src/components/Board.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport WinnerMessage from \"./WinnerMessage\";\n\nconst Board = () => {\n  const [cells, setCells] = useState(Array(9).fill(null));\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n  const [winner, setWinner] = useState(null);\n\n  const winningCombinations = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  const checkWinner = (newCells) => {\n    for (let combination of winningCombinations) {\n      const [a, b, c] = combination;\n      if (newCells[a] && newCells[a] === newCells[b] && newCells[a] === newCells[c]) {\n        setWinner(newCells[a]);\n        return true;\n      }\n    }\n    if (newCells.every((cell) => cell !== null)) {\n      setWinner(\"Draw\");\n      return true;\n    }\n    return false;\n  };\n\n  const computerMove = () => {\n    const emptyCells = cells.map((cell, index) => (cell === null ? index : null)).filter((index) => index !== null);\n\n    if (emptyCells.length === 0) return; // No moves available\n\n    const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    const newCells = [...cells];\n    newCells[randomIndex] = \"O\";\n\n    setCells(newCells);\n    if (!checkWinner(newCells)) {\n      setCurrentPlayer(\"X\");\n    }\n  };\n\n  const handleClick = (index) => {\n    if (cells[index] || winner || currentPlayer === \"O\") return;\n\n    const newCells = [...cells];\n    newCells[index] = \"X\";\n    setCells(newCells);\n\n    if (!checkWinner(newCells)) {\n      setCurrentPlayer(\"O\");\n    }\n  };\n\n  useEffect(() => {\n    if (currentPlayer === \"O\" && !winner) {\n      const timer = setTimeout(computerMove, 500); // Delay for AI realism\n      return () => clearTimeout(timer);\n    }\n  }, [currentPlayer]);\n\n  const restartGame = () => {\n    setCells(Array(9).fill(null));\n    setCurrentPlayer(\"X\");\n    setWinner(null);\n  };\n\n  return (\n    <div>\n      <div className=\"board\">\n        {cells.map((value, index) => (\n          <Cell key={index} value={value} onClick={() => handleClick(index)} />\n        ))}\n      </div>\n      {winner && <WinnerMessage winner={winner} onRestart={restartGame} />}\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACU,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,GAAG,CAAC;EACvD,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMgB,mBAAmB,GAAG,CAC1B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,MAAMC,WAAW,GAAIC,QAAQ,IAAK;IAChC,KAAK,IAAIC,WAAW,IAAIH,mBAAmB,EAAE;MAC3C,MAAM,CAACI,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGH,WAAW;MAC7B,IAAID,QAAQ,CAACE,CAAC,CAAC,IAAIF,QAAQ,CAACE,CAAC,CAAC,KAAKF,QAAQ,CAACG,CAAC,CAAC,IAAIH,QAAQ,CAACE,CAAC,CAAC,KAAKF,QAAQ,CAACI,CAAC,CAAC,EAAE;QAC7EP,SAAS,CAACG,QAAQ,CAACE,CAAC,CAAC,CAAC;QACtB,OAAO,IAAI;MACb;IACF;IACA,IAAIF,QAAQ,CAACK,KAAK,CAAEC,IAAI,IAAKA,IAAI,KAAK,IAAI,CAAC,EAAE;MAC3CT,SAAS,CAAC,MAAM,CAAC;MACjB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;EAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,UAAU,GAAGlB,KAAK,CAACmB,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,KAAMJ,IAAI,KAAK,IAAI,GAAGI,KAAK,GAAG,IAAK,CAAC,CAACC,MAAM,CAAED,KAAK,IAAKA,KAAK,KAAK,IAAI,CAAC;IAE/G,IAAIF,UAAU,CAACI,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;;IAErC,MAAMC,WAAW,GAAGL,UAAU,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,UAAU,CAACI,MAAM,CAAC,CAAC;IAC7E,MAAMZ,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC3BU,QAAQ,CAACa,WAAW,CAAC,GAAG,GAAG;IAE3BtB,QAAQ,CAACS,QAAQ,CAAC;IAClB,IAAI,CAACD,WAAW,CAACC,QAAQ,CAAC,EAAE;MAC1BL,gBAAgB,CAAC,GAAG,CAAC;IACvB;EACF,CAAC;EAED,MAAMsB,WAAW,GAAIP,KAAK,IAAK;IAC7B,IAAIpB,KAAK,CAACoB,KAAK,CAAC,IAAId,MAAM,IAAIF,aAAa,KAAK,GAAG,EAAE;IAErD,MAAMM,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC3BU,QAAQ,CAACU,KAAK,CAAC,GAAG,GAAG;IACrBnB,QAAQ,CAACS,QAAQ,CAAC;IAElB,IAAI,CAACD,WAAW,CAACC,QAAQ,CAAC,EAAE;MAC1BL,gBAAgB,CAAC,GAAG,CAAC;IACvB;EACF,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACd,IAAIW,aAAa,KAAK,GAAG,IAAI,CAACE,MAAM,EAAE;MACpC,MAAMsB,KAAK,GAAGC,UAAU,CAACZ,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC;MAC7C,OAAO,MAAMa,YAAY,CAACF,KAAK,CAAC;IAClC;EACF,CAAC,EAAE,CAACxB,aAAa,CAAC,CAAC;EAEnB,MAAM2B,WAAW,GAAGA,CAAA,KAAM;IACxB9B,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,gBAAgB,CAAC,GAAG,CAAC;IACrBE,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,oBACEV,OAAA;IAAAmC,QAAA,gBACEnC,OAAA;MAAKoC,SAAS,EAAC,OAAO;MAAAD,QAAA,EACnBhC,KAAK,CAACmB,GAAG,CAAC,CAACe,KAAK,EAAEd,KAAK,kBACtBvB,OAAA,CAACH,IAAI;QAAawC,KAAK,EAAEA,KAAM;QAACC,OAAO,EAAEA,CAAA,KAAMR,WAAW,CAACP,KAAK;MAAE,GAAvDA,KAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoD,CACrE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EACLjC,MAAM,iBAAIT,OAAA,CAACF,aAAa;MAACW,MAAM,EAAEA,MAAO;MAACkC,SAAS,EAAET;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAACxC,EAAA,CAjFID,KAAK;AAAA2C,EAAA,GAAL3C,KAAK;AAmFX,eAAeA,KAAK;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}